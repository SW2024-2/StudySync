<body id="learning-record-page">
  <h1>学習を記録する</h1>

  <!-- エラーメッセージ表示 -->
  <% if @study_log.errors.any? %>
    <div class="error-messages">
      <h2>エラーが発生しました:</h2>
      <ul>
        <% @study_log.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <%= form_with model: @study_log, local: true do |f| %>
    <!-- 科目入力 -->
    <div>
      <%= f.label :subject, "科目" %>
      <%= f.text_field :subject %>
    </div>

    <!-- 学習時間記録方法の選択 -->
    <div>
      <%= f.label :study_time_method, "学習時間の記録方法" %><br>
      <%= f.radio_button :study_time_method, 'manual', checked: @study_log.study_time_method == 'manual' %> 手動入力
      <%= f.radio_button :study_time_method, 'stopwatch', checked: @study_log.study_time_method == 'stopwatch' %> ストップウォッチ
      <%= f.radio_button :study_time_method, 'timer', checked: @study_log.study_time_method == 'timer' %> タイマー
    </div>

    <!-- 手動入力フィールド -->
    <div id="manual-input-fields" style="display: none;">
      <%= f.label :study_time, "学習時間(分)" %>
      <%= f.number_field :study_time %>
    </div>

    <!-- ストップウォッチとタイマーUI -->
    <div id="stopwatch-timer-fields" style="display: none;">
      <!-- ストップウォッチ機能 -->
      <div id="stopwatch" style="display: none;">
        <p>ストップウォッチ: <span id="stopwatch-time">0:00</span></p>
        <button type="button" id="start-stopwatch">スタート</button>
        <button type="button" id="stop-stopwatch" style="display: none;">停止</button>
        <button type="button" id="complete-stopwatch" style="display: none;">完了</button>
      </div>

      <!-- タイマー機能 -->
      <div id="timer" style="display: none;">
        <p>タイマー: <input type="number" id="timer-set-time" placeholder="分を入力" min="1"> 分</p>
        <p>残り時間: <span id="timer-time">00:00</span></p>
        <button type="button" id="start-timer">スタート</button>
        <button type="button" id="stop-timer" style="display: none;">停止</button>
        <button type="button" id="complete-timer" style="display: none;">完了</button>
      </div>
    </div>

    <!-- Hiddenフィールド: ストップウォッチやタイマー時間 -->
    <%= f.hidden_field :stopwatch_time %>
    <%= f.hidden_field :timer_time %>
    <%= f.hidden_field :study_time %>

    <!-- メモ入力 -->
    <div>
      <%= f.label :note, "メモ" %>
      <%= f.text_area :note %>
    </div>

    <!-- 送信ボタン -->
    <div>
      <%= f.submit "記録する" %>
    </div>
  <% end %>

  <!-- jQueryライブラリ -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    $(document).ready(function() {
      let stopwatchTime = 0, timerTime = 0, stopwatchInterval, timerInterval;

      // 学習時間記録方法の表示切り替え
      function toggleFields(method) {
        $("#manual-input-fields, #stopwatch, #timer, #stopwatch-timer-fields").hide();
        if (method === 'manual') {
          $("#manual-input-fields").show();
        } else if (method === 'stopwatch') {
          $("#stopwatch-timer-fields, #stopwatch").show();
        } else if (method === 'timer') {
          $("#stopwatch-timer-fields, #timer").show();
        }
      }

      $("input[name='study_log[study_time_method]']").change(function() {
        toggleFields($(this).val());
      });

      // ストップウォッチ機能
      $('#start-stopwatch').click(function() {
        stopwatchInterval = setInterval(function() {
          stopwatchTime++;
          let minutes = Math.floor(stopwatchTime / 60);
          let seconds = stopwatchTime % 60;
          $('#stopwatch-time').text(`${minutes}:${seconds.toString().padStart(2, '0')}`);
        }, 1000);
        $('#start-stopwatch').hide();
        $('#stop-stopwatch, #complete-stopwatch').show();
      });

      $('#stop-stopwatch').click(function() {
        clearInterval(stopwatchInterval);
        $('#start-stopwatch').show();
        $('#stop-stopwatch').hide();
      });

      $('#complete-stopwatch').click(function() {
        clearInterval(stopwatchInterval);
        $("input[name='study_log[study_time]']").val(Math.ceil(stopwatchTime / 60));
        $("input[name='study_log[stopwatch_time]']").val(stopwatchTime);
      });

      // タイマー機能
      $('#start-timer').click(function() {
        const inputMinutes = parseInt($('#timer-set-time').val());
        if (isNaN(inputMinutes) || inputMinutes <= 0) {
          alert("有効な時間を入力してください！");
          return;
        }
        timerTime = inputMinutes * 60;
        $('#timer-time').text(`${inputMinutes}:00`);
        timerInterval = setInterval(function() {
          timerTime--;
          let minutes = Math.floor(timerTime / 60);
          let seconds = timerTime % 60;
          $('#timer-time').text(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);
          if (timerTime <= 0) {
            clearInterval(timerInterval);
            alert("タイマーが終了しました！");
          }
        }, 1000);
        $('#start-timer').hide();
        $('#stop-timer, #complete-timer').show();
      });

      $('#stop-timer').click(function() {
        clearInterval(timerInterval);
        $('#start-timer').show();
        $('#stop-timer').hide();
      });

      $('#complete-timer').click(function() {
        clearInterval(timerInterval);
        const timeStudied = Math.ceil(timerTime / 60);
        $("input[name='study_log[study_time]']").val(timeStudied);
        $("input[name='study_log[timer_time]']").val(timerTime);
      });
    });
  </script>
</body>
